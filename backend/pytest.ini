[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Asyncio settings
asyncio_mode = auto

# Logging settings
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings
addopts = 
    --cov=app
    --cov=core
    --cov=models
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --no-cov-on-fail
    -v

# Coverage configuration
[coverage:run]
branch = True
source = 
    app
    core
    models

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:
    if TYPE_CHECKING:

# Show missing lines in coverage report
show_missing = True

# Fail if coverage is below threshold
fail_under = 80

[coverage:html]
directory = coverage_html

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    api: marks tests as API tests
    rag: marks tests as RAG component tests
    document: marks tests as document processing tests
    retrieval: marks tests as retrieval tests
    reranking: marks tests as reranking tests
    llm: marks tests as LLM service tests
    async: marks tests as asynchronous

# Environment variables for tests
env =
    TESTING=true
    POSTGRES_URL=postgresql://postgres:postgres@localhost:5432/docqa_test
    REDIS_URL=redis://localhost:6379/1

# Disable warnings from third-party libraries
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
    ignore::RuntimeWarning

# Fail on warnings
# Comment out during development if needed
#error = true
